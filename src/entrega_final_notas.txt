Entrega final

Objetivos generales
. Contarás con Mongo como sistema de persistencia principal
. Tendrás definidos todos los endpoints para poder trabajar con productos y
carritos. // completed 2/28/2025

Objetivos específicos
. Profesionalizar las consultas de productos con filtros, paginación y
ordenamientos. Profesionalizar la gestión de carrito para implementar los últimos conceptos
vistos.

Sugerencias
. Permitir comentarios en el archivo. La lógica del negocio que ya tienes
hecha no debería cambiar, sólo su persistencia.
. Los nuevos endpoints deben seguir la misma estructura y lógica que hemos
seguido.

Con base en nuestra implementación actual de productos, modificar el método
GET / para que cumpla con los siguientespuntos:
. Deberá poder recibir por query params un 
limit (opcional)   completado 3/1/2025
    . -limit permitirá devolver sólo el
    número de elementos solicitados al momento de la petición, en caso de no recibir
    limit, éste será de 10.
una page (opcional)  completado 3/1/2025
    . page permitirá devolver la página que queremos buscar,
    en caso de no recibir page, ésta será de 1
un sort (opcional)  completado 3/1/2025
    asc/desc, para realizar ordenamiento ascendente o descendente
    por precio, en caso de no recibir sort, no  realizar ningún ordenamiento
un query (opcional)  completado 3/1/2025
    . query, el tipo de elemento quequiero buscar (es decir, qué
     filtro aplicar), en caso de no recibir query, realizar la
    búsqueda general

**** 
parametros del query:
. Se deberá poder buscar productos por 
    1- categoría >>> category="placas"
    2- disponibilidad, >> stock > 0
 


El método GET deberá devolver un objeto con el siguienteformato:
{
status:success/error
payload: Resultado de los productos solicitados
totalPages: Total de páginas
prevPage: Página anterior
nextPage: Página siguiente
page: Página actual
hasPrevPage: Indicador para saber si la página
previa existe
hasNextPage: Indicador para saber si la página
siguiente existe.
prevLink: Link directo a la página previa (null si
hasPrevPage=false)
nextLink: Link directo a la página siguiente (null si
hasNextPage=false)
}
. Se deberá poder buscar productos por 
    1- categoría
    2- disponibilidad,
 y se deberá poder realizar un ordenamiento de estos
productos de manera ascendente o descendente por precio.
***completado 3/1/2025****


Se debe entregar
. Además, agregar al router de carts los siguientes endpoints:
. DELETE api/carts/:cid/products/:pid       completado 3/1/2025
        deberá eliminar del carrito el producto seleccionado.
. PUT api/carts/:cid completado 3/1/2025
        deberá actualizar el carrito con un arreglo de productos con el formato
        especificado arriba. (quantity va por query params )
. PUT api/carts/:cid/products/:pid COMPLETADO 3/1/2025
    deberá poder actualizar SÓLO la cantidad de ejemplares del producto
    por cualquier cantidad pasada desde req.body
. DELETE api/carts/:cid  COMPLETADO 3/1/2025
    deberá eliminar todos los productos del carrito

. Esta vez, para el modelo de Carts, en su propiedad products, el id
de cada producto generado dentro del array tiene que hacer referencia al modelo de Products.

Modificar la ruta /:cid para que al traer todos los productos, los  COMPLETAADO 3/2/2025
traiga completos mediante un “populate”. De esta manera
almacenamos sólo el Id, pero al solicitarlo podemos desglosar los
productos asociados.

Modificar la vista index.handlebars en el router de views ‘/products’, 
creada en la pre-entrega anterior, para visualizar todos los productos con
su respectiva paginación. Además, cada producto mostrado puede resolverse de dos
formas:
. Llevar a una nueva vista con el producto seleccionado con su descripción
completa, detalles de precio, categoría, etc. Además de un botón para agregar al
carrito.
Sugerencia de la ruta: “/products/:pid”.
. Contar con el botón de “agregar al    COMPLETADO 3/2/2025
carrito” directamente, sin necesidad de
abrir una página adicional con los detalles
del producto.
. Además, agregar una vista en          completado 3/2/2025
‘/carts/:cid (cartId) para visualizar un
carrito específico, donde se deberán
listar SOLO los productos que
pertenezcan a dicho carrito